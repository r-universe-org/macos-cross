# etc/Makeconf.  Generated from Makeconf.in by configure.
#
# ${R_HOME}/etc/Makeconf
#
# R was configured using the following call
# (not including env. vars and site configuration)
# configure  'FW_VERSION=4.3-x86_64' 'CC=clang -arch x86_64' 'CXX=clang++ -arch x86_64' 'OBJC=clang -arch x86_64' 'FC=gfortran -arch x86_64' 'CFLAGS=-falign-functions=64 -Wall -g -O2' 'CXXFLAGS=-falign-functions=64 -Wall -g -O2' 'OBJCFLAGS=-falign-functions=64 -Wall -g -O2' 'FCFLAGS=-Wall -g -O2' 'F77FLAGS=-Wall -g -O2' 'LDFLAGS=-L/opt/R/x86_64/lib' 'CPPFLAGS=-I/opt/R/x86_64/include' '--enable-memory-profiling' '--enable-R-framework' '--with-tcl-config=/opt/R/x86_64/lib/tclConfig.sh' '--with-tk-config=/opt/R/x86_64/lib/tkConfig.sh' '--build=x86_64-apple-darwin20' 'build_alias=x86_64-apple-darwin20' 'PKG_CONFIG_PATH=/usr/lib/pkgconfig:/opt/R/x86_64/lib/pkgconfig:/opt/R/x86_64/share/pkgconfig:/opt/X11/lib/pkgconfig:/opt/X11/share/pkgconfig'

# Define locations for the macOS cross-compilation. The default variables
# R_HOME and R_INCLUDE_DIR are left alone, as they may still be necessary to
# run R on Linux.
R_HOME_MACOS = /macos/r
R_INCLUDE_DIR_MACOS = "$(R_HOME_MACOS)/include"

# C, C++, and Fortran compilers used for macOS cross-compilation.
# Additional flags may be added here, such as -v for debugging.
CC_MACOS = /osxcross/bin/o64-clang
CXX_MACOS = /osxcross/bin/o64-clang++
FC_MACOS = /osxcross/bin/x86_64-apple-darwin22-gfortran

# Tell clang to use the correct underlying linker
FUSE_LD_MACOS = -fuse-ld=/osxcross/bin/x86_64-apple-darwin22-ld

# Libraries from a package's dependencies during a build, for the rare cases
# where a package links to another package.
PKG_LIBS_MACOS = -L"/tmp/macosSLs" -L"/tmp/macosDLs"

# System libs for R packages (from Autobrew)
LIBS_MACOS = -L/macos/usr/lib

# Set the minimum target macOS version. Must be set, even though not in the default
# R Makeconf any longer, because we use a very recent macOS SDK.
MACOS_VERSION_MIN = -mmacosx-version-min=10.13

## This fails if it contains spaces, or if it is quoted
include $(R_SHARE_DIR)/make/vars.mk

AR = ar
BLAS_LIBS = -L"$(R_HOME_MACOS)/lib$(R_ARCH)" -lRblas

## C compilers
CC = $(CC_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
CFLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CC17 = $(CC_MACOS) -arch x86_64 -std=gnu17 $(MACOS_VERSION_MIN)
C17FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CC23 = $(CC_MACOS) -arch x86_64 -std=gnu2x $(MACOS_VERSION_MIN)
C23FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CC90 = $(CC_MACOS) -arch x86_64 -std=gnu90 $(MACOS_VERSION_MIN)
C90FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CC99 = $(CC_MACOS) -arch x86_64 -std=gnu99 $(MACOS_VERSION_MIN)
C99FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CPICFLAGS = -fPIC
CPPFLAGS = -I/macos/usr/include
C_VISIBILITY = 

## C++ compilers
CXX = $(CXX_MACOS) -arch x86_64 -std=gnu++17 $(MACOS_VERSION_MIN)
CXXFLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CXXPICFLAGS = -fPIC
CXX11 = $(CXX_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
CXX11FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CXX11PICFLAGS = -fPIC
CXX11STD = -std=gnu++11
CXX14 = $(CXX_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
CXX14FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CXX14PICFLAGS = -fPIC
CXX14STD = -std=gnu++14
CXX17 = $(CXX_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
CXX17FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CXX17PICFLAGS = -fPIC
CXX17STD = -std=gnu++17
CXX20 = $(CXX_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
CXX20FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CXX20PICFLAGS = -fPIC
CXX20STD = -std=gnu++20
CXX23 = $(CXX_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
CXX23FLAGS = -falign-functions=64 -Wall -g -O2 $(LTO)
CXX23PICFLAGS = -fPIC
CXX23STD = -std=gnu++2b
CXX_VISIBILITY = 

DYLIB_EXT = .dylib
DYLIB_LD = $(CC)
DYLIB_LDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CFLAGS) $(CPICFLAGS)
## should be used by packages for dylibs, but at the time of writing was not
DYLIB_LINK = $(DYLIB_LD) $(DYLIB_LDFLAGS) $(LDFLAGS)
ECHO = echo
ECHO_C = \c
ECHO_N = 
ECHO_T = 

## Fortran
FC = $(FC_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
FCFLAGS = -Wall -g -O2 $(LTO_FC)
## additional libs needed when linking with $(FC), e.g. on some Oracle compilers
FCLIBS_XTRA = 
FFLAGS = -Wall -g -O2 $(LTO_FC)
FLIBS =  -L/osxcross/x86_64-apple-darwin22/lib -lgfortran -lquadmath
FPICFLAGS = -fPIC
FPIEFLAGS = -fPIE
F_VISIBILITY = 

FOUNDATION_CPPFLAGS = 
FOUNDATION_LIBS = -framework Foundation
JAR = /usr/bin/jar
JAVA = /usr/bin/java
JAVAC = /usr/bin/javac
JAVAH = /usr/bin/javah
## JAVA_HOME might be used in the next three.  
## They are for packages 'JavaGD' and 'rJava'
JAVA_HOME = /Library/Java/JavaVirtualMachines/jdk-11.0.18+10/Contents/Home
JAVA_CPPFLAGS = -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/darwin
JAVA_LIBS = -L$(JAVA_HOME)/lib/server -ljvm
JAVA_LD_LIBRARY_PATH = $(JAVA_HOME)/lib/server
LAPACK_LIBS = -L"$(R_HOME_MACOS)/lib$(R_ARCH)" -lRlapack
LDFLAGS = -L/opt/R/x86_64/lib
## we only need this is if it is external, as otherwise link to R
LIBINTL=   -Wl,-framework -Wl,CoreFoundation
LIBM = 
LIBR0 = -L"$(R_HOME_MACOS)/lib$(R_ARCH)"
LIBR1 = -lR
LIBR = -L"$(R_HOME_MACOS)/lib"
LIBS =  -L/macos/usr/lib -lpcre2-8 -llzma -lbz2 -lz -licucore -ldl -lm -liconv
## needed by R CMD config
LIBnn = lib
LIBTOOL = $(SHELL) "$(R_HOME)/bin/libtool"
## set for --enable-lto, --enable-lto=check
LTO = 
LTO_FC = 
LTO_LD = 
## set for --enable-lto=R, used in INSTALL
LTO_OPT = 
LTO_FC_OPT = 
## needed to build applications linking to static libR
MAIN_LD = $(CC)
MAIN_LDFLAGS = 
MAIN_LINK = $(MAIN_LD) $(MAIN_LDFLAGS) $(LDFLAGS)
MKINSTALLDIRS = "$(R_HOME)/bin/mkinstalldirs"
NM = /macos/usr/bin/nm -B
OBJC = $(CC_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
OBJCFLAGS = -falign-functions=64 -Wall -g -O2 -fobjc-exceptions $(LTO)
OBJC_LIBS = -lobjc 
OBJCXX = $(CXX_MACOS) -arch x86_64 $(MACOS_VERSION_MIN)
R_ARCH = 
RANLIB = ranlib
SAFE_FFLAGS = -Wall -g -O2 -msse2 -mfpmath=sse
SED = /usr/bin/sed
SHELL = /bin/sh
SHLIB_CFLAGS = 
SHLIB_CXXFLAGS = 
SHLIB_CXXLD = $(CXX)
SHLIB_CXXLDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CXXFLAGS) $(CXXPICFLAGS) $(LTO_LD)
SHLIB_CXX11LD = $(CXX11) $(CXX11STD)
SHLIB_CXX11LDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CXX11FLAGS) $(CXX11PICFLAGS) $(LTO_LD)
SHLIB_CXX14LD = $(CXX14) $(CXX14STD)
SHLIB_CXX14LDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CXX14FLAGS) $(CXX14PICFLAGS) $(LTO_LD)
SHLIB_CXX17LD = $(CXX17) $(CXX17STD)
SHLIB_CXX17LDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CXX17FLAGS) $(CXX17PICFLAGS) $(LTO_LD)
SHLIB_CXX20LD = $(CXX20) $(CXX20STD)
SHLIB_CXX20LDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CXX20FLAGS) $(CXX20PICFLAGS) $(LTO_LD)
SHLIB_CXX23LD = $(CXX23) $(CXX23STD)
SHLIB_CXX23LDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CXX23FLAGS) $(CXX23PICFLAGS) $(LTO_LD)
SHLIB_EXT = .so
SHLIB_FCLD = $(FC)
SHLIB_FCLDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(FCFLAGS) $(FPICFLAGS)
SHLIB_FFLAGS = 
SHLIB_LD = $(CC)
## used for add-on packages linked by C
SHLIB_LDFLAGS = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CFLAGS) $(CPICFLAGS) $(LTO_LD)
## used for standard packages
SHLIB_LDFLAGS_R = -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress $(FUSE_LD_MACOS)# $(CFLAGS) $(CPICFLAGS) $(LTO_LD)
SHLIB_LIBADD = 
## We want to ensure libR is picked up from $(R_HOME)/lib
## before e.g. /usr/local/lib if a version is already installed.
SHLIB_LINK = $(SHLIB_LD) $(SHLIB_LDFLAGS) $(LIBR0) $(LDFLAGS)
SHLIB_OPENMP_CFLAGS = 
SHLIB_OPENMP_CXXFLAGS = 
SHLIB_OPENMP_FFLAGS = 
STRIP_STATIC_LIB = strip -S
STRIP_SHARED_LIB = strip -x
# TODO: TCLTK flags need to be fixed, and we should not be linking against a Linux X11
TCLTK_CPPFLAGS = -I/macos/usr/include -I/macos/usr/include -I/opt/X11/include
TCLTK_LIBS = -L/macos/usr/lib -ltcl8.6 -L/macos/usr/lib -ltk8.6 -L/opt/X11/lib -lX11 -Wl,-weak-lXss -lXext
YACC = bison -y

## for linking to libR.a
STATIC_LIBR = #  "$(R_HOME)/lib$(R_ARCH)/libR.a"  $(BLAS_LIBS) $(FLIBS)  $(LIBINTL) -lreadline -lncurses  $(LIBS)

## These are recorded as macros for legacy use in packages
## set on AIX, formerly for old glibc (-D__NO_MATH_INLINES)
R_XTRA_CFLAGS = 
##  was formerly set on HP-UX
R_XTRA_CPPFLAGS =  -I"$(R_INCLUDE_DIR_MACOS)" -DNDEBUG
## currently unset
R_XTRA_CXXFLAGS = 
## used for gfortran >= 7 in R 3.6.1 - 4.2.x
R_XTRA_FFLAGS = 

## SHLIB_CFLAGS SHLIB_CXXFLAGS SHLIB_FFLAGS are apparently currently unused
## SHLIB_CXXFLAGS is undocumented, there is no SHLIB_FCFLAGS
ALL_CFLAGS =  $(PKG_CFLAGS) $(CPICFLAGS) $(SHLIB_CFLAGS) $(CFLAGS)
## XDEFS is a temporary measure for use by R CMD INSTALL
ALL_CPPFLAGS =  -I"$(R_INCLUDE_DIR_MACOS)" -DNDEBUG $(PKG_CPPFLAGS) $(CLINK_CPPFLAGS) $(CPPFLAGS)  $(XDEFS)
ALL_CXXFLAGS =  $(PKG_CXXFLAGS) $(CXXPICFLAGS) $(SHLIB_CXXFLAGS) $(CXXFLAGS)
ALL_OBJCFLAGS = $(PKG_OBJCFLAGS) $(CPICFLAGS) $(SHLIB_CFLAGS) $(OBJCFLAGS)
ALL_OBJCXXFLAGS = $(PKG_OBJCXXFLAGS) $(CXXPICFLAGS) $(SHLIB_CXXFLAGS) $(OBJCXXFLAGS)
ALL_FFLAGS =  $(PKG_FFLAGS) $(FPICFLAGS) $(SHLIB_FFLAGS) $(FFLAGS)
## can be overridden by R CMD SHLIB
P_FCFLAGS = $(PKG_FFLAGS)
ALL_FCFLAGS =  $(P_FCFLAGS) $(FPICFLAGS) $(SHLIB_FFLAGS) $(FCFLAGS)
## LIBR here as a couple of packages use this without SHLIB_LINK
ALL_LIBS = $(PKG_LIBS_MACOS) $(LIBS_MACOS) $(PKG_LIBS) $(SHLIB_LIBADD) $(LIBR) $(LIBINTL)

.SUFFIXES:
.SUFFIXES: .c .cc .cpp .d .f .f90 .f95 .m .mm .M .o

.c.o:
	$(CC) $(ALL_CPPFLAGS) $(ALL_CFLAGS) -c $< -o $@
.c.d:
	@echo "making $@ from $<"
	@$(CC) -MM $(ALL_CPPFLAGS) $< > $@
.cc.o:
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -c $< -o $@
.cpp.o:
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -c $< -o $@
.cc.d:
	@echo "making $@ from $<"
	@$(CXX) -M $(ALL_CPPFLAGS) $< > $@
.cpp.d:
	@echo "making $@ from $<"
	@$(CXX) -M $(ALL_CPPFLAGS) $< > $@
.m.o:
	$(OBJC) $(ALL_CPPFLAGS) $(ALL_OBJCFLAGS) -c $< -o $@
.m.d:
	@echo "making $@ from $<"
	@$(OBJC) -MM $(ALL_CPPFLAGS) $< > $@
.mm.o:
	$(OBJCXX) $(ALL_CPPFLAGS) $(ALL_OBJCXXFLAGS) -c $< -o $@
.M.o:
	$(OBJCXX) $(ALL_CPPFLAGS) $(ALL_OBJCXXFLAGS) -c $< -o $@
.f.o:
	$(FC) $(ALL_FFLAGS) -c $< -o $@
.f95.o:
	$(FC) $(ALL_FCFLAGS) -c  $< -o $@
.f90.o:
	$(FC) $(ALL_FCFLAGS) -c  $< -o $@
